// Do not edit this file; automatically generated by build.py.
'use strict';


Blockly.Python=new Blockly.Generator("Python");Blockly.Python.addReservedWords("False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip");
Blockly.Python.ORDER_ATOMIC=0;Blockly.Python.ORDER_COLLECTION=1;Blockly.Python.ORDER_STRING_CONVERSION=1;Blockly.Python.ORDER_MEMBER=2.1;Blockly.Python.ORDER_FUNCTION_CALL=2.2;Blockly.Python.ORDER_EXPONENTIATION=3;Blockly.Python.ORDER_UNARY_SIGN=4;Blockly.Python.ORDER_BITWISE_NOT=4;Blockly.Python.ORDER_MULTIPLICATIVE=5;Blockly.Python.ORDER_ADDITIVE=6;Blockly.Python.ORDER_BITWISE_SHIFT=7;Blockly.Python.ORDER_BITWISE_AND=8;Blockly.Python.ORDER_BITWISE_XOR=9;Blockly.Python.ORDER_BITWISE_OR=10;
Blockly.Python.ORDER_RELATIONAL=11;Blockly.Python.ORDER_LOGICAL_NOT=12;Blockly.Python.ORDER_LOGICAL_AND=13;Blockly.Python.ORDER_LOGICAL_OR=14;Blockly.Python.ORDER_CONDITIONAL=15;Blockly.Python.ORDER_LAMBDA=16;Blockly.Python.ORDER_NONE=99;
Blockly.Python.ORDER_OVERRIDES=[[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_FUNCTION_CALL,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_MEMBER],[Blockly.Python.ORDER_MEMBER,Blockly.Python.ORDER_FUNCTION_CALL],[Blockly.Python.ORDER_LOGICAL_NOT,Blockly.Python.ORDER_LOGICAL_NOT],[Blockly.Python.ORDER_LOGICAL_AND,Blockly.Python.ORDER_LOGICAL_AND],[Blockly.Python.ORDER_LOGICAL_OR,Blockly.Python.ORDER_LOGICAL_OR]];
Blockly.Python.init=function(a){Blockly.Python.PASS=this.INDENT+"pass\n";Blockly.Python.definitions_=Object.create(null);Blockly.Python.functionNames_=Object.create(null);Blockly.Python.variableDB_?Blockly.Python.variableDB_.reset():Blockly.Python.variableDB_=new Blockly.Names(Blockly.Python.RESERVED_WORDS_);Blockly.Python.variableDB_.setVariableMap(a.getVariableMap());for(var b=[],c=Blockly.Variables.allDeveloperVariables(a),d=0;d<c.length;d++)b.push(Blockly.Python.variableDB_.getName(c[d],Blockly.Names.DEVELOPER_VARIABLE_TYPE)+
" = None");a=Blockly.Variables.allUsedVarModels(a);for(d=0;d<a.length;d++)b.push(Blockly.Python.variableDB_.getName(a[d].getId(),Blockly.Variables.NAME_TYPE)+" = None");Blockly.Python.definitions_.variables=b.join("\n")};
Blockly.Python.finish=function(a){var b=[],c=[],d;for(d in Blockly.Python.definitions_){var e=Blockly.Python.definitions_[d];e.match(/^(from\s+\S+\s+)?import\s+\S+/)?b.push(e):c.push(e)}delete Blockly.Python.definitions_;delete Blockly.Python.functionNames_;Blockly.Python.variableDB_.reset();a=(b.join("\n")+"\n\n"+c.join("\n\n")).replace(/\n\n+/g,"\n\n").replace(/\n*$/,"\n\n\n")+a;a=Blockly.Python.prefixLines(a,"  ");return"from readerapp import logger\nlog = logger.Logger('inteligent').getInstance()\nlog.info(\"--- Intelligent script started ---\")\ntry:\n"+
a+'except:\n  log.exception("Exception occured")'};Blockly.Python.scrubNakedValue=function(a){return a+"\n"};Blockly.Python.quote_=function(a){a=a.replace(/\\/g,"\\\\").replace(/\n/g,"\\\n");var b="'";-1!==a.indexOf("'")&&(-1===a.indexOf('"')?b='"':a=a.replace(/'/g,"\\'"));return b+a+b};Blockly.Python.multiline_quote_=function(a){a=a.replace(/'''/g,"\\'\\'\\'");return"'''"+a+"'''"};
Blockly.Python.scrub_=function(a,b,c){var d="";if(!a.outputConnection||!a.outputConnection.targetConnection){var e=a.getCommentText();e&&(e=Blockly.utils.string.wrap(e,Blockly.Python.COMMENT_WRAP-3),d+=Blockly.Python.prefixLines(e+"\n","# "));for(var f=0;f<a.inputList.length;f++)a.inputList[f].type==Blockly.INPUT_VALUE&&(e=a.inputList[f].connection.targetBlock())&&(e=Blockly.Python.allNestedComments(e))&&(d+=Blockly.Python.prefixLines(e,"# "))}a=a.nextConnection&&a.nextConnection.targetBlock();c=
c?"":Blockly.Python.blockToCode(a);return d+b+c};Blockly.Python.getAdjustedInt=function(a,b,c,d){c=c||0;a.workspace.options.oneBasedIndex&&c--;var e=a.workspace.options.oneBasedIndex?"1":"0";a=Blockly.Python.valueToCode(a,b,c?Blockly.Python.ORDER_ADDITIVE:Blockly.Python.ORDER_NONE)||e;Blockly.isNumber(a)?(a=parseInt(a,10)+c,d&&(a=-a)):(a=0<c?"int("+a+" + "+c+")":0>c?"int("+a+" - "+-c+")":"int("+a+")",d&&(a="-"+a));return a};Blockly.Python.addReservedWords("debugLogEntry,block_id,text,comment,time,json,logging,TimedRotatingFileHandler,debugLog");var trans_keyword="#TRANS#";Blockly.Python.addReservedWords(trans_keyword);
var divider_comment_start="\n#-----v----- %% -----v-----#",divider_comment_stop="#-----^----- %% -----^-----#\n",import_time=divider_comment_start.replace("%%","import_time")+"\nimport time\n"+divider_comment_stop.replace("%%","import_time"),import_json=divider_comment_start.replace("%%","import_json")+"\nimport json\n"+divider_comment_stop.replace("%%","import_json"),global_debugLogEntry=divider_comment_start.replace("%%","global_debugLogEntry")+'\nimport logging\nfrom logging.handlers import TimedRotatingFileHandler\ndebugLog = logging.getLogger(\'debugLog\')\ndebugLog.addHandler(TimedRotatingFileHandler("/etc/readerapp/inteligent-debug.log",interval=1,when=\'midnight\',backupCount=1,utc=True))\ndebugLog.setLevel(10)\ndef debugLogEntry(block_id,text,comment=False):\n  if isinstance(text, str):\n    text = {"t":text}\n  if comment is not False:\n    entry = {\n      "t":time.strftime("%H:%M:%S"),\n      "i":block_id,\n      "s":text,\n      "c":comment\n    }\n  else:\n    entry = {\n      "t":time.strftime("%H:%M:%S"),\n      "i":block_id,\n      "s":text\n    }\n  debugLog.debug(json.dumps(entry)+\',\')\n'+
divider_comment_stop.replace("%%","global_debugLogEntry"),importDebugLogDependancies=function(){Blockly.Python.definitions_.import_time=import_time;Blockly.Python.definitions_.import_json=import_json;Blockly.Python.definitions_.global_debugLogEntry=global_debugLogEntry};Blockly.Python.addReservedWords("logger,log,__name__");Blockly.Python.addReservedWords("mercury,reader,simple_read,ant,readTime,power,max_power,power_object,antenna,read_epcs_data,ret,list,map,t");
var simple_read=divider_comment_start.replace("%%","simple_read")+'\nimport mercury\nreader = mercury.Reader("tmr:///dev/ttyS1")\ndef simple_read(ant,readTime,power):\n  log.info("simple_read function called")\n  reader.set_read_plan(ant, "GEN2")\n  reader.set_region("open")\n  max_power = reader.get_power_range()[1]\n  power_object = []\n  for antenna in ant:\n    power_object.append((antenna,(max_power/100.0)*power))\n  reader.set_read_powers(power_object)\n  read_epcs_data = reader.read(readTime)\n  ret = list(map(lambda t: t.epc.decode(\'utf-8\'), read_epcs_data))\n  log.info("simple_read function ended")\n  return ret\n'+
divider_comment_stop.replace("%%","simple_read");Blockly.Python.addReservedWords("readerapp,onioni2cgpio,ErefideGPIO,gpios");var gpios_init=divider_comment_start.replace("%%","gpios_init")+"\nfrom readerapp.onioni2cgpio import ErefideGPIO\ngpios = ErefideGPIO()\n"+divider_comment_stop.replace("%%","gpios_init");Blockly.Python.addReservedWords("setGpo,pin,value");
Blockly.Python.set_gpo=function(a){var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"value",Blockly.Python.ORDER_ATOMIC);importDebugLogDependancies();Blockly.Python.definitions_.global_ErefideGPIO=gpios_init;Blockly.Python.definitions_.global_setGpo=divider_comment_start.replace("%%","global_setGpo")+'\ndef setGpo(pin,value,block_id):\n  log.info("setGpo function called")\n  debugLogEntry(block_id,{"t":"blockly.debug.set_gpo","d":[str(pin),("'+trans_keyword+
'blockly.debug.high" if value else "'+trans_keyword+'blockly.debug.low")]})\n  return gpios.setGpo(pin,value)\n'+divider_comment_stop.replace("%%","global_setGpo");return Blockly.Python.injectId("setGpo("+b+","+c+",%1)\n",a)};Blockly.Python.addReservedWords("getGpi,pin");
Blockly.Python.read_gpi=function(a){var b=Blockly.Python.valueToCode(a,"pin",Blockly.Python.ORDER_ATOMIC);importDebugLogDependancies();Blockly.Python.definitions_.global_ErefideGPIO=gpios_init;Blockly.Python.definitions_.global_getGpi=divider_comment_start.replace("%%","global_getGpi")+'\ndef getGpi(pin,block_id):\n  log.info("getGpi function called")\n  ret = gpios.getGpi(pin)\n  debugLogEntry(block_id,{"t":"blockly.debug.get_gpi","d":[str(pin)]},{"t":"blockly.debug.get_gpi_value","d":[str(pin),("'+
trans_keyword+'blockly.debug.high" if ret else "'+trans_keyword+'blockly.debug.low")]})\n  return ret\n'+divider_comment_stop.replace("%%","global_getGpi");return[Blockly.Python.injectId("getGpi("+b+",%1)\n",a),Blockly.Python.ORDER_NONE]};Blockly.Python.addReservedWords("INT_RISING,INT_FALLING,INT_BOTH,gpi_int_callback_INT_RISING_GPI0,gpi_int_callback_INT_RISING_GPI1,gpi_int_callback_INT_RISING_GPI2,gpi_int_callback_INT_RISING_GPI3,gpi_int_callback_INT_FALLING_GPI0,gpi_int_callback_INT_FALLING_GPI1,gpi_int_callback_INT_FALLING_GPI2,gpi_int_callback_INT_FALLING_GPI3,gpi_int_callback_INT_BOTH_GPI0,gpi_int_callback_INT_BOTH_GPI1,gpi_int_callback_INT_BOTH_GPI2,gpi_int_callback_INT_BOTH_GPI3");
Blockly.Python.gpi_trigger=function(a){var b=a.getFieldValue("edge"),c=a.getFieldValue("pin"),d=Blockly.Python.statementToCode(a,"fn"),e=trans_keyword+"blockly.debug.edge_"+(0==b?"rising":1==b?"falling":"any");b=0==b?"INT_RISING":1==b?"INT_FALLING":"INT_BOTH";importDebugLogDependancies();Blockly.Python.definitions_.global_ErefideGPIO=gpios_init;b=divider_comment_start.replace("%%","gpi_trigger %1")+"\ndef gpi_int_callback_"+b+"_GPI"+c+'():\n  log.info("gpi_int_callback_'+b+"_GPI"+c+' function called")\n  debugLogEntry(%1,{"t": "blockly.debug.gpi_interrupt", "d": ["'+
e+'","'+c+'"]})\n'+d+'  log.info("gpi_int_callback_'+b+"_GPI"+c+' function ended -^-")\n\nlog.info("gpi_trigger for pin GPI'+c+" and edge "+b+' init code")\ngpios.setupGPIInterrupt('+c+",gpios."+b+",gpi_int_callback_"+b+"_GPI"+c+')\nlog.info("gpi_trigger for pin GPI'+c+" and edge "+b+' init ended")\n'+divider_comment_stop.replace("%%","gpi_trigger %1");return Blockly.Python.injectId(b,a)};Blockly.Python.gpi_picker=function(a){return[a.getFieldValue("pin"),Blockly.Python.ORDER_ATOMIC]};
Blockly.Python.gpo_picker=function(a){return[a.getFieldValue("pin"),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.gpio_state_picker=function(a){return[a.getFieldValue("state"),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.addReservedWords("time,sleep,t");
Blockly.Python.sleep=function(a){var b=a.getFieldValue("sleep_time");importDebugLogDependancies();Blockly.Python.definitions_.import_time=import_time;Blockly.Python.definitions_.global_sleep=divider_comment_start.replace("%%","global_sleep")+'\ndef sleep(t,block_id):\n  log.info("sleep function called")\n  debugLogEntry(block_id,{"t": "blockly.debug.sleep", "d": [str(t)]})\n  time.sleep(t)\n'+divider_comment_stop.replace("%%","global_sleep");return Blockly.Python.injectId("sleep("+b+",%1)\n",a)};
Blockly.Python.addReservedWords("buzzer,t");
Blockly.Python.beep_buzzer=function(a){var b=a.getFieldValue("time");importDebugLogDependancies();Blockly.Python.definitions_.global_ErefideGPIO=gpios_init;Blockly.Python.definitions_.global_buzzer=divider_comment_start.replace("%%","global_buzzer")+'\ndef buzzer(t,block_id):\n  log.info("buzzer function called")\n  debugLogEntry(block_id,{"t": "blockly.debug.buzzer", "d": [str(t)]})\n  gpios.buzzer(t*1000)\n'+divider_comment_stop.replace("%%","global_buzzer");return Blockly.Python.injectId("buzzer("+
b+",%1)\n",a)};Blockly.Python.addReservedWords("urllib,request,json,OnionUtils,my_unique_id,post_function,url,data,req,jsondataasbytes");
Blockly.Python.post_data=function(a){var b=Blockly.Python.valueToCode(a,"data",Blockly.Python.ORDER_ATOMIC),c=Blockly.Python.valueToCode(a,"url",Blockly.Python.ORDER_ATOMIC);c.startsWith("'http://")||c.startsWith("'https://")||(c="'http://"+c.substr(1));importDebugLogDependancies();Blockly.Python.definitions_.import_json="import json";Blockly.Python.definitions_.global_post_function=divider_comment_start.replace("%%","global_post_function")+"\nfrom urllib import request\nfrom readerapp.utils import OnionUtils\nmy_unique_id = OnionUtils().get_unique_id()\ndef post_function(url,data,block_id):\n  log.info(\"post_function function called\")\n  try:\n    req = request.Request(url)\n    req.add_header('Content-Type', 'application/json; charset=utf-8')\n    jsondataasbytes = json.dumps(data).encode('utf-8')\n    req.add_header('Content-Length', len(jsondataasbytes))\n    req.add_header('Erefide-Id', my_unique_id)\n    request.urlopen(req, jsondataasbytes)\n    debugLogEntry(block_id,\"blockly.debug.post_success\",{\""+
trans_keyword+'blockly.debug.post_url":str(url),"'+trans_keyword+'blockly.debug.post_data":data})\n  except Exception as e:\n    log.error("Exception occured!")\n    log.error(e)\n    debugLogEntry(block_id,"blockly.debug.post_failed",{"'+trans_keyword+'blockly.debug.post_url":str(url),"'+trans_keyword+'blockly.debug.post_error":str(e),"'+trans_keyword+'blockly.debug.post_data":data})\n  log.info("post_function function ended")\n'+divider_comment_stop.replace("%%","global_post_function");return Blockly.Python.injectId("post_function("+
c+","+b+",%1)\n",a)};Blockly.Python.current_time=function(a){Blockly.Python.definitions_.import_time=import_time;return['time.strftime("%H:%M")',Blockly.Python.ORDER_NONE]};Blockly.Python.current_date=function(a){Blockly.Python.definitions_.import_time=import_time;return['time.strftime("%d.%m.%Y")',Blockly.Python.ORDER_NONE]};Blockly.Python.current_datetime=function(a){Blockly.Python.definitions_.import_time=import_time;return['time.strftime("%d.%m.%Y %H:%M")',Blockly.Python.ORDER_NONE]};Blockly.Python.addReservedWords("simple_read_wrapper");
Blockly.Python.simple_read=function(a){var b=1E3*a.getFieldValue("time"),c="TRUE"==a.getFieldValue("ant_1"),d="TRUE"==a.getFieldValue("ant_2"),e="TRUE"==a.getFieldValue("ant_3"),f="TRUE"==a.getFieldValue("ant_4"),h=a.getFieldValue("power");importDebugLogDependancies();Blockly.Python.definitions_.global_simple_read=simple_read;c=((c?"1,":"")+(d?"2,":"")+(e?"3,":"")+(f?"4,":"")).slice(0,-1);Blockly.Python.definitions_.simple_read_wrapper=divider_comment_start.replace("%%","simple_read_wrapper")+'\ndef simple_read_wrapper(ant,readTime,power,block_id):\n  log.info("simple_read_wrapper function called")\n  ret = simple_read(ant,readTime,power)\n  debugLogEntry(block_id,"blockly.debug.simple_read",ret)\n  return ret\n'+
divider_comment_stop.replace("%%","simple_read_wrapper");return[Blockly.Python.injectId("simple_read_wrapper(["+c+"],"+b+","+h+",%1)",a),Blockly.Python.ORDER_NONE]};Blockly.Python.addReservedWords("CustomTimer,autonomous_cb");
Blockly.Python.autonomous_read=function(a){var b="TRUE"==a.getFieldValue("ant_1"),c="TRUE"==a.getFieldValue("ant_2"),d="TRUE"==a.getFieldValue("ant_3"),e="TRUE"==a.getFieldValue("ant_4"),f=Blockly.Python.variableDB_.getName(a.getFieldValue("read_tag"),Blockly.Variables.NAME_TYPE),h=Blockly.Python.prefixLines(Blockly.Python.statementToCode(a,"callback"),"    "),k=a.getFieldValue("power");b=((b?"1,":"")+(c?"2,":"")+(d?"3,":"")+(e?"4,":"")).slice(0,-1);importDebugLogDependancies();Blockly.Python.definitions_.import_customtimer=
divider_comment_start.replace("%%","import_customtimer")+"\n  from readerapp.customtimer import CustomTimer\n  "+divider_comment_stop.replace("%%","import_customtimer");Blockly.Python.definitions_.global_simple_read=simple_read;f=divider_comment_start.replace("%%","autonomous_read %1")+'\ndef autonomous_cb():\n    log.info("autonomous_cb function called")\n    '+f+" = simple_read(["+b+"],900,"+k+")\n    if len("+f+'):\n      log.info("statements_callback called")\n      debugLogEntry(%1,"blockly.debug.autonomous_read",'+
f+")\n"+h+'      log.info("statements_callback ended")\n    log.info("autonomous_cb function ended")\n\nlog.info("autonomous_cb init code")\nCustomTimer('+900*1.1+',autonomous_cb).start()\nlog.info("autonomous_cb init ended")\n'+divider_comment_stop.replace("%%","autonomous_read %1");return Blockly.Python.injectId(f,a)};Blockly.Python.addReservedWords("program_start");
Blockly.Python.program_start=function(a){var b=Blockly.Python.statementToCode(a,"code");importDebugLogDependancies();b=divider_comment_start.replace("%%","program_start %1")+'\ndef program_start():\n  log.info("program_start function called")\n  debugLogEntry(%1,"blockly.debug.program_start")\n'+b+'  log.info("program_start function ended")\n\nprogram_start()\n'+divider_comment_stop.replace("%%","program_start %1");return Blockly.Python.injectId(b,a)};Blockly.Python.addReservedWords("CustomTimer");
Blockly.Python.cron_task=function(a){var b=a.getFieldValue("time"),c=a.getFieldValue("selector"),d=Blockly.Python.statementToCode(a,"code");importDebugLogDependancies();Blockly.Python.definitions_.import_customtimer=divider_comment_start.replace("%%","import_customtimer")+"\nfrom readerapp.customtimer import CustomTimer\n"+divider_comment_stop.replace("%%","import_customtimer");var e=Blockly.Python.variableDB_.getDistinctName("cron_task_"+b.toString()+"_"+c,Blockly.Procedures.NAME_TYPE),f=6E4*("hours"==
c?60:1);b=divider_comment_start.replace("%%","cron_task %1")+"\ndef "+e+'():\n  log.info("'+e+' function called")\n  debugLogEntry(%1,{"t": "blockly.debug.cron_task", "d": ["'+b+'","'+trans_keyword+"blockly.debug."+c+'"]})\n'+d+'  log.info("'+e+' function ended")\n\nlog.info("'+e+' init code")\nCustomTimer('+b*f+","+e+').start()\nlog.info("'+e+' init ended")\n'+divider_comment_stop.replace("%%","cron_task %1");return Blockly.Python.injectId(b,a)};Blockly.Python.lists={};Blockly.Python.lists_create_empty=function(a){return["[]",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.lists_create_with=function(a){for(var b=Array(a.itemCount_),c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,"ADD"+c,Blockly.Python.ORDER_NONE)||"None";return["["+b.join(", ")+"]",Blockly.Python.ORDER_ATOMIC]};
Blockly.Python.lists_repeat=function(a){var b=Blockly.Python.valueToCode(a,"ITEM",Blockly.Python.ORDER_NONE)||"None";a=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";return["["+b+"] * "+a,Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.lists_length=function(a){return["len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"[]")+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_isEmpty=function(a){return["not len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"[]")+")",Blockly.Python.ORDER_LOGICAL_NOT]};
Blockly.Python.lists_indexOf=function(a){var b=Blockly.Python.valueToCode(a,"FIND",Blockly.Python.ORDER_NONE)||"[]",c=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"''";if(a.workspace.options.oneBasedIndex)var d=" 0",e=" + 1",f="";else d=" -1",e="",f=" - 1";if("FIRST"==a.getFieldValue("END"))return a=Blockly.Python.provideFunction_("first_index",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(my_list, elem):","  try: index = my_list.index(elem)"+e,"  except: index ="+d,"  return index"]),
[a+"("+c+", "+b+")",Blockly.Python.ORDER_FUNCTION_CALL];a=Blockly.Python.provideFunction_("last_index",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(my_list, elem):","  try: index = len(my_list) - my_list[::-1].index(elem)"+f,"  except: index ="+d,"  return index"]);return[a+"("+c+", "+b+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_getIndex=function(a){var b=a.getFieldValue("MODE")||"GET",c=a.getFieldValue("WHERE")||"FROM_START",d=Blockly.Python.valueToCode(a,"VALUE","RANDOM"==c?Blockly.Python.ORDER_NONE:Blockly.Python.ORDER_MEMBER)||"[]";switch(c){case "FIRST":if("GET"==b)return[d+"[0]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==b)return[d+".pop(0)",Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop(0)\n";break;case "LAST":if("GET"==b)return[d+"[-1]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==
b)return[d+".pop()",Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop()\n";break;case "FROM_START":a=Blockly.Python.getAdjustedInt(a,"AT");if("GET"==b)return[d+"["+a+"]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==b)return[d+".pop("+a+")",Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop("+a+")\n";break;case "FROM_END":a=Blockly.Python.getAdjustedInt(a,"AT",1,!0);if("GET"==b)return[d+"["+a+"]",Blockly.Python.ORDER_MEMBER];if("GET_REMOVE"==b)return[d+".pop("+a+")",
Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==b)return d+".pop("+a+")\n";break;case "RANDOM":Blockly.Python.definitions_.import_random="import random";if("GET"==b)return["random.choice("+d+")",Blockly.Python.ORDER_FUNCTION_CALL];d=Blockly.Python.provideFunction_("lists_remove_random_item",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  x = int(random.random() * len(myList))","  return myList.pop(x)"])+"("+d+")";if("GET_REMOVE"==b)return[d,Blockly.Python.ORDER_FUNCTION_CALL];if("REMOVE"==
b)return d+"\n"}throw Error("Unhandled combination (lists_getIndex).");};
Blockly.Python.lists_setIndex=function(a){importDebugLogDependancies();var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_MEMBER)||"[]",c=a.getFieldValue("MODE")||"GET",d=a.getFieldValue("WHERE")||"FROM_START",e=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"None";switch(d){case "FIRST":if("SET"==c)return b+"[0] = "+e+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_set", "d": ["'+b+'","#TRANS#blockly.debug.first"]},{"'+b+'[0]":'+b+"[0]})\n",a);
if("INSERT"==c)return b+".insert(0, "+e+")\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_insert", "d": ["'+b+'","#TRANS#blockly.debug.first"]},{"'+b+'.insert(0)":'+b+"[0]})\n",a);break;case "LAST":if("SET"==c)return b+"[-1] = "+e+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_set", "d": ["'+b+'","#TRANS#blockly.debug.last"]},{"'+b+'[-1]":'+b+"[-1]})\n",a);if("INSERT"==c)return b+".append("+e+")\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_append", "d": ["'+
b+'"]},{"'+b+'.append()":'+b+"[-1]})\n",a);break;case "FROM_START":d=Blockly.Python.getAdjustedInt(a,"AT");if("SET"==c)return b+"["+d+"] = "+e+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_set", "d": ["'+b+'","'+d+'"]},{"'+b+"["+d+']":'+b+"["+d+"]})\n",a);if("INSERT"==c)return b+".insert("+d+", "+e+")\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_insert", "d": ["'+b+'","'+d+'"]},{"'+b+".insert("+d+')":'+b+"["+d+"]})\n",a);break;case "FROM_END":d=
Blockly.Python.getAdjustedInt(a,"AT",1,!0);if("SET"==c)return b+"["+d+"] = "+e+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_set", "d": ["'+b+'","'+d+'"]},{"'+b+"["+d+']":'+b+"["+d+"]})\n",a);if("INSERT"==c)return b+".insert("+d+", "+e+")\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_insert", "d": ["'+b+'","'+d+'"]},{"'+b+".insert("+d+')":'+b+"["+d+"]})\n",a);break;case "RANDOM":Blockly.Python.definitions_.import_random="import random";if(b.match(/^\w+$/))d=
"";else{d=Blockly.Python.variableDB_.getDistinctName("tmp_list",Blockly.Variables.NAME_TYPE);var f=d+" = "+b+"\n";b=d;d=f}f=Blockly.Python.variableDB_.getDistinctName("tmp_x",Blockly.Variables.NAME_TYPE);d+=f+" = int(random.random() * len("+b+"))\n";if("SET"==c)return d+=b+"["+f+"] = "+e+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_set", "d": ["'+b+'",'+f+']},{"'+b+'["+str('+f+')+"]":'+b+"["+f+"]})\n",a);if("INSERT"==c)return d+=b+".insert("+f+", "+e+")\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.list_insert", "d": ["'+
b+'",'+f+']},{"'+b+'.insert("+str('+f+')+")":'+b+"["+f+"]})\n",a)}throw Error("Unhandled combination (lists_setIndex).");};
Blockly.Python.lists_getSublist=function(a){var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_MEMBER)||"[]",c=a.getFieldValue("WHERE1"),d=a.getFieldValue("WHERE2");switch(c){case "FROM_START":c=Blockly.Python.getAdjustedInt(a,"AT1");"0"==c&&(c="");break;case "FROM_END":c=Blockly.Python.getAdjustedInt(a,"AT1",1,!0);break;case "FIRST":c="";break;default:throw Error("Unhandled option (lists_getSublist)");}switch(d){case "FROM_START":a=Blockly.Python.getAdjustedInt(a,"AT2",1);break;case "FROM_END":a=
Blockly.Python.getAdjustedInt(a,"AT2",0,!0);Blockly.isNumber(String(a))?"0"==a&&(a=""):(Blockly.Python.definitions_.import_sys="import sys",a+=" or sys.maxsize");break;case "LAST":a="";break;default:throw Error("Unhandled option (lists_getSublist)");}return[b+"["+c+" : "+a+"]",Blockly.Python.ORDER_MEMBER]};
Blockly.Python.lists_sort=function(a){var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]",c=a.getFieldValue("TYPE");a="1"===a.getFieldValue("DIRECTION")?"False":"True";return[Blockly.Python.provideFunction_("lists_sort",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(my_list, type, reverse):","  def try_float(s):","    try:","      return float(s)","    except:","      return 0","  key_funcs = {",'    "NUMERIC": try_float,','    "TEXT": str,','    "IGNORE_CASE": lambda s: str(s).lower()',
"  }","  key_func = key_funcs[type]","  list_cpy = list(my_list)","  return sorted(list_cpy, key=key_func, reverse=reverse)"])+"("+b+', "'+c+'", '+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_split=function(a){var b=a.getFieldValue("MODE");if("SPLIT"==b)b=Blockly.Python.valueToCode(a,"INPUT",Blockly.Python.ORDER_MEMBER)||"''",a=Blockly.Python.valueToCode(a,"DELIM",Blockly.Python.ORDER_NONE),a=b+".split("+a+")";else if("JOIN"==b)b=Blockly.Python.valueToCode(a,"INPUT",Blockly.Python.ORDER_NONE)||"[]",a=Blockly.Python.valueToCode(a,"DELIM",Blockly.Python.ORDER_MEMBER)||"''",a=a+".join("+b+")";else throw Error("Unknown mode: "+b);return[a,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.lists_reverse=function(a){return["list(reversed("+(Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]")+"))",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.lists_contains=function(a){var b=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_ATOMIC);return[Blockly.Python.valueToCode(a,"ELEMENT",Blockly.Python.ORDER_ATOMIC)+" in "+b,Blockly.Python.ORDER_NONE]};Blockly.Python.logic={};
Blockly.Python.controls_if=function(a){importDebugLogDependancies();var b=0,c='debugLogEntry(%1,"blockly.debug.if")\n';Blockly.Python.STATEMENT_PREFIX&&(c+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));do{var d=Blockly.Python.valueToCode(a,"IF"+b,Blockly.Python.ORDER_NONE)||"False";var e=Blockly.Python.statementToCode(a,"DO"+b)||Blockly.Python.PASS;Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+
e);c+=(0==b?"if ":"elif ")+d+":\n"+e;++b}while(a.getInput("IF"+b));if(a.getInput("ELSE")||Blockly.Python.STATEMENT_SUFFIX)e=Blockly.Python.statementToCode(a,"ELSE")||Blockly.Python.PASS,Blockly.Python.STATEMENT_SUFFIX&&(e=Blockly.Python.prefixLines(Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a),Blockly.Python.INDENT)+e),c+="else:\n"+e;return Blockly.Python.injectId(c,a)};Blockly.Python.controls_ifelse=Blockly.Python.controls_if;
Blockly.Python.logic_compare=function(a){var b={EQ:"==",NEQ:"!=",LT:"<",LTE:"<=",GT:">",GTE:">="}[a.getFieldValue("OP")],c=Blockly.Python.ORDER_RELATIONAL,d=Blockly.Python.valueToCode(a,"A",c)||"0";a=Blockly.Python.valueToCode(a,"B",c)||"0";return[d+" "+b+" "+a,c]};
Blockly.Python.logic_operation=function(a){var b="AND"==a.getFieldValue("OP")?"and":"or",c="and"==b?Blockly.Python.ORDER_LOGICAL_AND:Blockly.Python.ORDER_LOGICAL_OR,d=Blockly.Python.valueToCode(a,"A",c);a=Blockly.Python.valueToCode(a,"B",c);if(d||a){var e="and"==b?"True":"False";d||(d=e);a||(a=e)}else a=d="False";return[d+" "+b+" "+a,c]};Blockly.Python.logic_negate=function(a){return["not "+(Blockly.Python.valueToCode(a,"BOOL",Blockly.Python.ORDER_LOGICAL_NOT)||"True"),Blockly.Python.ORDER_LOGICAL_NOT]};
Blockly.Python.logic_boolean=function(a){return["TRUE"==a.getFieldValue("BOOL")?"True":"False",Blockly.Python.ORDER_ATOMIC]};Blockly.Python.logic_null=function(a){return["None",Blockly.Python.ORDER_ATOMIC]};
Blockly.Python.logic_ternary=function(a){var b=Blockly.Python.valueToCode(a,"IF",Blockly.Python.ORDER_CONDITIONAL)||"False",c=Blockly.Python.valueToCode(a,"THEN",Blockly.Python.ORDER_CONDITIONAL)||"None";a=Blockly.Python.valueToCode(a,"ELSE",Blockly.Python.ORDER_CONDITIONAL)||"None";return[c+" if "+b+" else "+a,Blockly.Python.ORDER_CONDITIONAL]};Blockly.Python.loops={};
Blockly.Python.controls_repeat_ext=function(a){importDebugLogDependancies();var b=a.getField("TIMES")?String(parseInt(a.getFieldValue("TIMES"),10)):Blockly.Python.valueToCode(a,"TIMES",Blockly.Python.ORDER_NONE)||"0";b=Blockly.isNumber(b)?parseInt(b,10):"int("+b+")";var c=Blockly.Python.statementToCode(a,"DO");c=Blockly.Python.addLoopTrap(c,a)||Blockly.Python.PASS;var d=Blockly.Python.variableDB_.getDistinctName("count",Blockly.Variables.NAME_TYPE);return"for "+d+" in range("+b+"):\n"+Blockly.Python.injectId('  debugLogEntry(%1,"blockly.debug.loop","no: "+str('+
d+"))\n",a)+c};Blockly.Python.controls_repeat=Blockly.Python.controls_repeat_ext;
Blockly.Python.controls_whileUntil=function(a){importDebugLogDependancies();var b="UNTIL"==a.getFieldValue("MODE"),c=Blockly.Python.valueToCode(a,"BOOL",b?Blockly.Python.ORDER_LOGICAL_NOT:Blockly.Python.ORDER_NONE)||"False",d=Blockly.Python.statementToCode(a,"DO");d=Blockly.Python.addLoopTrap(d,a)||Blockly.Python.PASS;b&&(c="not "+c);return"while "+c+":\n"+Blockly.Python.injectId('  debugLogEntry(%1,"blockly.debug.loop")\n',a)+d};
Blockly.Python.controls_for=function(a){importDebugLogDependancies();var b=Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),c=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"0",d=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"0",e=Blockly.Python.valueToCode(a,"BY",Blockly.Python.ORDER_NONE)||"1",f=Blockly.Python.statementToCode(a,"DO");f=Blockly.Python.addLoopTrap(f,a)||Blockly.Python.PASS;var h="",k=function(){return Blockly.Python.provideFunction_("upRange",
["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(start, stop, step):","  while start <= stop:","    yield start","    start += abs(step)"])},l=function(){return Blockly.Python.provideFunction_("downRange",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(start, stop, step):","  while start >= stop:","    yield start","    start -= abs(step)"])};var g=function(a,b,c){return"("+a+" <= "+b+") and "+k()+"("+a+", "+b+", "+c+") or "+l()+"("+a+", "+b+", "+c+")"};if(Blockly.isNumber(c)&&Blockly.isNumber(d)&&
Blockly.isNumber(e))c=Number(c),d=Number(d),e=Math.abs(Number(e)),0===c%1&&0===d%1&&0===e%1?(c<=d?(d++,g=0==c&&1==e?d:c+", "+d,1!=e&&(g+=", "+e)):(d--,g=c+", "+d+", -"+e),g="range("+g+")"):(g=c<d?k():l(),g+="("+c+", "+d+", "+e+")");else{var m=function(a,c){if(Blockly.isNumber(a))a=Number(a);else if(a.match(/^\w+$/))a="float("+a+")";else{var d=Blockly.Python.variableDB_.getDistinctName(b+c,Blockly.Variables.NAME_TYPE);h+=d+" = float("+a+")\n";a=d}return a};c=m(c,"_start");d=m(d,"_end");m(e,"_inc");
g="number"==typeof c&&"number"==typeof d?c<d?k(c,d,e):l(c,d,e):g(c,d,e)}return h+="for "+b+" in "+g+":\n"+Blockly.Python.injectId('  debugLogEntry(%1,"blockly.debug.loop",{"'+b+'":'+b+"})\n",a)+f};
Blockly.Python.controls_forEach=function(a){importDebugLogDependancies();var b=Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),c=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_RELATIONAL)||"[]",d=Blockly.Python.statementToCode(a,"DO");d=Blockly.Python.addLoopTrap(d,a)||Blockly.Python.PASS;return"for "+b+" in "+c+":\n"+Blockly.Python.injectId('  debugLogEntry(%1,"blockly.debug.loop",{"'+b+'":'+b+"})\n",a)+d};
Blockly.Python.controls_flow_statements=function(a){importDebugLogDependancies();var b="";Blockly.Python.STATEMENT_PREFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,a));Blockly.Python.STATEMENT_SUFFIX&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_SUFFIX,a));if(Blockly.Python.STATEMENT_PREFIX){var c=Blockly.Constants.Loops.CONTROL_FLOW_IN_LOOP_CHECK_MIXIN.getSurroundLoop(a);c&&!c.suppressPrefixSuffix&&(b+=Blockly.Python.injectId(Blockly.Python.STATEMENT_PREFIX,c))}switch(a.getFieldValue("FLOW")){case "BREAK":return b+
Blockly.Python.injectId('debugLogEntry(%1,"blockly.debug.loop_break")\n',a)+"break\n";case "CONTINUE":return b+Blockly.Python.injectId('debugLogEntry(%1,"blockly.debug.loop_continue")\n',a)+"continue\n"}throw Error("Unknown flow statement.");};Blockly.Python.math={};Blockly.Python.addReservedWords("math,random,Number");Blockly.Python.math_number=function(a){a=Number(a.getFieldValue("NUM"));if(Infinity==a){a='float("inf")';var b=Blockly.Python.ORDER_FUNCTION_CALL}else-Infinity==a?(a='-float("inf")',b=Blockly.Python.ORDER_UNARY_SIGN):b=0>a?Blockly.Python.ORDER_UNARY_SIGN:Blockly.Python.ORDER_ATOMIC;return[a,b]};
Blockly.Python.math_arithmetic=function(a){var b={ADD:[" + ",Blockly.Python.ORDER_ADDITIVE],MINUS:[" - ",Blockly.Python.ORDER_ADDITIVE],MULTIPLY:[" * ",Blockly.Python.ORDER_MULTIPLICATIVE],DIVIDE:[" / ",Blockly.Python.ORDER_MULTIPLICATIVE],POWER:[" ** ",Blockly.Python.ORDER_EXPONENTIATION]}[a.getFieldValue("OP")],c=b[0];b=b[1];var d=Blockly.Python.valueToCode(a,"A",b)||"0";a=Blockly.Python.valueToCode(a,"B",b)||"0";return[d+c+a,b]};
Blockly.Python.math_single=function(a){var b=a.getFieldValue("OP");if("NEG"==b){var c=Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_UNARY_SIGN)||"0";return["-"+c,Blockly.Python.ORDER_UNARY_SIGN]}Blockly.Python.definitions_.import_math="import math";a="SIN"==b||"COS"==b||"TAN"==b?Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_MULTIPLICATIVE)||"0":Blockly.Python.valueToCode(a,"NUM",Blockly.Python.ORDER_NONE)||"0";switch(b){case "ABS":c="math.fabs("+a+")";break;case "ROOT":c="math.sqrt("+
a+")";break;case "LN":c="math.log("+a+")";break;case "LOG10":c="math.log10("+a+")";break;case "EXP":c="math.exp("+a+")";break;case "POW10":c="math.pow(10,"+a+")";break;case "ROUND":c="round("+a+")";break;case "ROUNDUP":c="math.ceil("+a+")";break;case "ROUNDDOWN":c="math.floor("+a+")";break;case "SIN":c="math.sin("+a+" / 180.0 * math.pi)";break;case "COS":c="math.cos("+a+" / 180.0 * math.pi)";break;case "TAN":c="math.tan("+a+" / 180.0 * math.pi)"}if(c)return[c,Blockly.Python.ORDER_FUNCTION_CALL];switch(b){case "ASIN":c=
"math.asin("+a+") / math.pi * 180";break;case "ACOS":c="math.acos("+a+") / math.pi * 180";break;case "ATAN":c="math.atan("+a+") / math.pi * 180";break;default:throw Error("Unknown math operator: "+b);}return[c,Blockly.Python.ORDER_MULTIPLICATIVE]};
Blockly.Python.math_constant=function(a){var b={PI:["math.pi",Blockly.Python.ORDER_MEMBER],E:["math.e",Blockly.Python.ORDER_MEMBER],GOLDEN_RATIO:["(1 + math.sqrt(5)) / 2",Blockly.Python.ORDER_MULTIPLICATIVE],SQRT2:["math.sqrt(2)",Blockly.Python.ORDER_MEMBER],SQRT1_2:["math.sqrt(1.0 / 2)",Blockly.Python.ORDER_MEMBER],INFINITY:["float('inf')",Blockly.Python.ORDER_ATOMIC]};a=a.getFieldValue("CONSTANT");"INFINITY"!=a&&(Blockly.Python.definitions_.import_math="import math");return b[a]};
Blockly.Python.math_number_property=function(a){var b=Blockly.Python.valueToCode(a,"NUMBER_TO_CHECK",Blockly.Python.ORDER_MULTIPLICATIVE)||"0",c=a.getFieldValue("PROPERTY");if("PRIME"==c)return Blockly.Python.definitions_.import_math="import math",Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number",[Blockly.Python.provideFunction_("math_isPrime",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(n):","  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods",
"  # If n is not a number but a string, try parsing it.","  if not isinstance(n, Number):","    try:","      n = float(n)","    except:","      return False","  if n == 2 or n == 3:","    return True","  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.","  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:","    return False","  # Check all the numbers of form 6k +/- 1, up to sqrt(n).","  for x in range(6, int(math.sqrt(n)) + 2, 6):","    if n % (x - 1) == 0 or n % (x + 1) == 0:",
"      return False","  return True"])+"("+b+")",Blockly.Python.ORDER_FUNCTION_CALL];switch(c){case "EVEN":var d=b+" % 2 == 0";break;case "ODD":d=b+" % 2 == 1";break;case "WHOLE":d=b+" % 1 == 0";break;case "POSITIVE":d=b+" > 0";break;case "NEGATIVE":d=b+" < 0";break;case "DIVISIBLE_BY":a=Blockly.Python.valueToCode(a,"DIVISOR",Blockly.Python.ORDER_MULTIPLICATIVE);if(!a||"0"==a)return["False",Blockly.Python.ORDER_ATOMIC];d=b+" % "+a+" == 0"}return[d,Blockly.Python.ORDER_RELATIONAL]};
Blockly.Python.math_change=function(a){Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";var b=Blockly.Python.valueToCode(a,"DELTA",Blockly.Python.ORDER_ADDITIVE)||"0";a=Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE);return a+" = ("+a+" if isinstance("+a+", Number) else 0) + "+b+"\n"};Blockly.Python.math_round=Blockly.Python.math_single;Blockly.Python.math_trig=Blockly.Python.math_single;
Blockly.Python.math_on_list=function(a){var b=a.getFieldValue("OP");a=Blockly.Python.valueToCode(a,"LIST",Blockly.Python.ORDER_NONE)||"[]";switch(b){case "SUM":b="sum("+a+")";break;case "MIN":b="min("+a+")";break;case "MAX":b="max("+a+")";break;case "AVERAGE":Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";b=Blockly.Python.provideFunction_("math_mean",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  localList = [e for e in myList if isinstance(e, Number)]",
"  if not localList: return","  return float(sum(localList)) / len(localList)"]);b=b+"("+a+")";break;case "MEDIAN":Blockly.Python.definitions_.from_numbers_import_Number="from numbers import Number";b=Blockly.Python.provideFunction_("math_median",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(myList):","  localList = sorted([e for e in myList if isinstance(e, Number)])","  if not localList: return","  if len(localList) % 2 == 0:","    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0",
"  else:","    return localList[(len(localList) - 1) // 2]"]);b=b+"("+a+")";break;case "MODE":b=Blockly.Python.provideFunction_("math_modes",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(some_list):","  modes = []","  # Using a lists of [item, count] to keep count rather than dict",'  # to avoid "unhashable" errors when the counted item is itself a list or dict.',"  counts = []","  maxCount = 1","  for item in some_list:","    found = False","    for count in counts:","      if count[0] == item:",
"        count[1] += 1","        maxCount = max(maxCount, count[1])","        found = True","    if not found:","      counts.append([item, 1])","  for counted_item, item_count in counts:","    if item_count == maxCount:","      modes.append(counted_item)","  return modes"]);b=b+"("+a+")";break;case "STD_DEV":Blockly.Python.definitions_.import_math="import math";b=Blockly.Python.provideFunction_("math_standard_deviation",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(numbers):","  n = len(numbers)",
"  if n == 0: return","  mean = float(sum(numbers)) / n","  variance = sum((x - mean) ** 2 for x in numbers) / n","  return math.sqrt(variance)"]);b=b+"("+a+")";break;case "RANDOM":Blockly.Python.definitions_.import_random="import random";b="random.choice("+a+")";break;default:throw Error("Unknown operator: "+b);}return[b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.math_modulo=function(a){var b=Blockly.Python.valueToCode(a,"DIVIDEND",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";a=Blockly.Python.valueToCode(a,"DIVISOR",Blockly.Python.ORDER_MULTIPLICATIVE)||"0";return[b+" % "+a,Blockly.Python.ORDER_MULTIPLICATIVE]};
Blockly.Python.math_constrain=function(a){var b=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"0",c=Blockly.Python.valueToCode(a,"LOW",Blockly.Python.ORDER_NONE)||"0";a=Blockly.Python.valueToCode(a,"HIGH",Blockly.Python.ORDER_NONE)||"float('inf')";return["min(max("+b+", "+c+"), "+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.math_random_int=function(a){Blockly.Python.definitions_.import_random="import random";var b=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"0";a=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"0";return["random.randint("+b+", "+a+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.math_random_float=function(a){Blockly.Python.definitions_.import_random="import random";return["random.random()",Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.math_atan2=function(a){Blockly.Python.definitions_.import_math="import math";var b=Blockly.Python.valueToCode(a,"X",Blockly.Python.ORDER_NONE)||"0";return["math.atan2("+(Blockly.Python.valueToCode(a,"Y",Blockly.Python.ORDER_NONE)||"0")+", "+b+") / math.pi * 180",Blockly.Python.ORDER_MULTIPLICATIVE]};Blockly.Python.texts={};Blockly.Python.text=function(a){return[Blockly.Python.quote_(a.getFieldValue("TEXT")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text_multiline=function(a){return[Blockly.Python.multiline_quote_(a.getFieldValue("TEXT")),Blockly.Python.ORDER_ATOMIC]};Blockly.Python.text.forceString_=function(a){return Blockly.Python.text.forceString_.strRegExp.test(a)?a:"str("+a+")"};Blockly.Python.text.forceString_.strRegExp=/^\s*'([^']|\\')*'\s*$/;
Blockly.Python.text_join=function(a){switch(a.itemCount_){case 0:return["''",Blockly.Python.ORDER_ATOMIC];case 1:return a=Blockly.Python.valueToCode(a,"ADD0",Blockly.Python.ORDER_NONE)||"''",a=Blockly.Python.text.forceString_(a),[a,Blockly.Python.ORDER_FUNCTION_CALL];case 2:var b=Blockly.Python.valueToCode(a,"ADD0",Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.valueToCode(a,"ADD1",Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.text.forceString_(b)+" + "+Blockly.Python.text.forceString_(a);
return[a,Blockly.Python.ORDER_ADDITIVE];default:b=[];for(var c=0;c<a.itemCount_;c++)b[c]=Blockly.Python.valueToCode(a,"ADD"+c,Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.variableDB_.getDistinctName("x",Blockly.Variables.NAME_TYPE);a="''.join([str("+a+") for "+a+" in ["+b.join(", ")+"]])";return[a,Blockly.Python.ORDER_FUNCTION_CALL]}};
Blockly.Python.text_append=function(a){importDebugLogDependancies();var b=Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),c=Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_NONE)||"''";return b+" = str("+b+") + "+Blockly.Python.text.forceString_(c)+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.text_append", "d": ["'+b+'"]},{"'+b+'":'+b+"})\n",a)};
Blockly.Python.text_length=function(a){return["len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"''")+")",Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.text_isEmpty=function(a){return["not len("+(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"''")+")",Blockly.Python.ORDER_LOGICAL_NOT]};
Blockly.Python.text_indexOf=function(a){var b="FIRST"==a.getFieldValue("END")?"find":"rfind",c=Blockly.Python.valueToCode(a,"FIND",Blockly.Python.ORDER_NONE)||"''";b=(Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_MEMBER)||"''")+"."+b+"("+c+")";return a.workspace.options.oneBasedIndex?[b+" + 1",Blockly.Python.ORDER_ADDITIVE]:[b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_charAt=function(a){var b=a.getFieldValue("WHERE")||"FROM_START",c=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_MEMBER)||"''";switch(b){case "FIRST":return[c+"[0]",Blockly.Python.ORDER_MEMBER];case "LAST":return[c+"[-1]",Blockly.Python.ORDER_MEMBER];case "FROM_START":return a=Blockly.Python.getAdjustedInt(a,"AT"),[c+"["+a+"]",Blockly.Python.ORDER_MEMBER];case "FROM_END":return a=Blockly.Python.getAdjustedInt(a,"AT",1,!0),[c+"["+a+"]",Blockly.Python.ORDER_MEMBER];case "RANDOM":return Blockly.Python.definitions_.import_random=
"import random",[Blockly.Python.provideFunction_("text_random_letter",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(text):","  x = int(random.random() * len(text))","  return text[x];"])+"("+c+")",Blockly.Python.ORDER_FUNCTION_CALL]}throw Error("Unhandled option (text_charAt).");};
Blockly.Python.text_getSubstring=function(a){var b=a.getFieldValue("WHERE1"),c=a.getFieldValue("WHERE2"),d=Blockly.Python.valueToCode(a,"STRING",Blockly.Python.ORDER_MEMBER)||"''";switch(b){case "FROM_START":b=Blockly.Python.getAdjustedInt(a,"AT1");"0"==b&&(b="");break;case "FROM_END":b=Blockly.Python.getAdjustedInt(a,"AT1",1,!0);break;case "FIRST":b="";break;default:throw Error("Unhandled option (text_getSubstring)");}switch(c){case "FROM_START":a=Blockly.Python.getAdjustedInt(a,"AT2",1);break;case "FROM_END":a=
Blockly.Python.getAdjustedInt(a,"AT2",0,!0);Blockly.isNumber(String(a))?"0"==a&&(a=""):(Blockly.Python.definitions_.import_sys="import sys",a+=" or sys.maxsize");break;case "LAST":a="";break;default:throw Error("Unhandled option (text_getSubstring)");}return[d+"["+b+" : "+a+"]",Blockly.Python.ORDER_MEMBER]};
Blockly.Python.text_changeCase=function(a){var b={UPPERCASE:".upper()",LOWERCASE:".lower()",TITLECASE:".title()"}[a.getFieldValue("CASE")];return[(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''")+b,Blockly.Python.ORDER_FUNCTION_CALL]};Blockly.Python.text_trim=function(a){var b={LEFT:".lstrip()",RIGHT:".rstrip()",BOTH:".strip()"}[a.getFieldValue("MODE")];return[(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''")+b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_prompt_ext=function(a){var b=Blockly.Python.provideFunction_("text_prompt",["def "+Blockly.Python.FUNCTION_NAME_PLACEHOLDER_+"(msg):","  try:","    return raw_input(msg)","  except NameError:","    return input(msg)"]),c=a.getField("TEXT")?Blockly.Python.quote_(a.getFieldValue("TEXT")):Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_NONE)||"''";b=b+"("+c+")";"NUMBER"==a.getFieldValue("TYPE")&&(b="float("+b+")");return[b,Blockly.Python.ORDER_FUNCTION_CALL]};
Blockly.Python.text_prompt=Blockly.Python.text_prompt_ext;Blockly.Python.text_count=function(a){var b=Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''";a=Blockly.Python.valueToCode(a,"SUB",Blockly.Python.ORDER_NONE)||"''";return[b+".count("+a+")",Blockly.Python.ORDER_MEMBER]};
Blockly.Python.text_replace=function(a){var b=Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''",c=Blockly.Python.valueToCode(a,"FROM",Blockly.Python.ORDER_NONE)||"''";a=Blockly.Python.valueToCode(a,"TO",Blockly.Python.ORDER_NONE)||"''";return[b+".replace("+c+", "+a+")",Blockly.Python.ORDER_MEMBER]};Blockly.Python.text_reverse=function(a){return[(Blockly.Python.valueToCode(a,"TEXT",Blockly.Python.ORDER_MEMBER)||"''")+"[::-1]",Blockly.Python.ORDER_MEMBER]};Blockly.Python.variables={};Blockly.Python.variables_get=function(a){return[Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),Blockly.Python.ORDER_ATOMIC]};
Blockly.Python.variables_set=function(a){importDebugLogDependancies();var b=Blockly.Python.valueToCode(a,"VALUE",Blockly.Python.ORDER_NONE)||"0",c=Blockly.Python.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE);return c+" = "+b+"\n"+Blockly.Python.injectId('debugLogEntry(%1,{"t": "blockly.debug.set_variable", "d": ["'+c+'"]},{"'+c+'":'+c+"})\n",a)};
Blockly.Python.variablesDynamic={};Blockly.Python.variables_get_dynamic=Blockly.Python.variables_get;Blockly.Python.variables_set_dynamic=Blockly.Python.variables_set;